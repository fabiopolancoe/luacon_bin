local string = string
local xpcall = xpcall
local package = package
local tostring = tostring
local os = os
local unpack = unpack or table.unpack
local require = require
local bit32 = bit32
local pairs = pairs
local next = next
local assert = assert
local rawlen = rawlen
local ipairs = ipairs
local io = io
local rawequal = rawequal
local collectgarbage = collectgarbage
local arg = arg
local load = load
local module = module
local rawset = rawset
local math = math
local pcall = pcall
local type = type
local debug = debug
local getmetatable = getmetatable
local select = select
local table = table
local rawget = rawget
local loadstring = loadstring
local print = print 
local coroutine = coroutine
local dofile = dofile
local tonumber = tonumber 
local setmetatable = setmetatable 
local error = error 
local loadfile = loadfile 
local _G = _G

local function exitluacon(out)
print('\n')
  print('[CON] program finished in ' .. out - timestamp_en)
  os.exit(0)
end
local function validate(entry)
  if string.lower(entry)==':exit' or string.lower(entry)==':e' then
    print('\n')
    print('[ARG] collecting...')
    local collected_entries = ''
    for _, log in ipairs(entries) do 
      collected_entries = collected_entries .. log .. '\n'
    end
    print('[ARG] collected! ')
    repeat
      repeat
        io.write("[ARG] save to >> ")
        io.flush()
        xpcall(function() name = io.read() end, function(e) xpcall(function() name = io.read() end, function(e) print('[ARG] ' .. e) end) end)
      until name
      if name:len() < 5 then print('[ARG] name is too short') end
    until name:len() > 4
    print('[ARG] saving...')
    io.open(name, 'w'):write(collected_entries)
    print('[ARG] collected entries were saved in ' .. name)
    collected_entries = nil
    collectgarbage()
  elseif string.lower(entry)==':quit' or string.lower(entry)==':q' then
    exitluacon(os.clock())
  else
    return false
  end
  return true
end

local function execute(entry)
  local parameters= {}
  for par in string.gmatch(entry, '([^@]+)' ) do 
    parameters[#parameters+1] = par
  end
  parameters[0] = entry
  local sandbox = {}
  sandbox.raw = parameters[1]
  if sandbox.raw == nil and EXIT_IF_EMPTY == true then exitluacon(os.clock()) elseif sandbox.raw == nil then return end
  sandbox.arguments = parameters
  table.remove(sandbox.arguments,1)
  sandbox.func, sandbox.msg = load(sandbox.raw)
  sandbox.success = xpcall(
    function(...)
      sandbox.nG = {}
      sandbox.oG = {}
      for x,v in pairs(_G) do
        sandbox.oG[x] = v
      end
      for a,v in ipairs(sandbox.arguments) do
        sandbox.x = load(v)
        if sandbox.x~=nil then sandbox.x() end
      end
      if sandbox.func~=nil then sandbox.ret = sandbox.func() entries[#entries+1] = entry else error(sandbox.msg) end
      print('\n')
      sandbox.mG = _G
      local found = false
      for mG_name,mG_value in pairs(sandbox.mG) do
        found = false
        for oG_name,oG_value in pairs(sandbox.oG) do
          if mG_name==oG_name then found=true end
        end
        if not found then 
          if ENVIRONMENT~='script' then _G[mG_name]=nil end
          sandbox.nG[mG_name] = mG_value  
        end
      end
      if next(sandbox.nG)~=nil then
        print("Globals declared in sandbox")
        for x,v in pairs(sandbox.nG) do
          print("::"..x..' = '..tostring(v))
        end
      end
      _G['l_msg'] = sandbox.ret
    end,
    function(output)
      _G['l_msg'] = output
    end)
  if sandbox.success==true then
    _G['l_msg'] = '[RETURN] = '..tostring(_G['l_msg'])
  elseif sandbox.success==false then
    _G['l_msg'] = '[ERROR] '..tostring(_G['l_msg'])
  end
  print(l_msg)
end

return {exitluacon, validate, execute}